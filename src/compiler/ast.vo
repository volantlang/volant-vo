import "io.vo";
import "tokens.vo";
import "names.vo";

// Expressions
export enum ExprType {
	IS,
	NEW,
	FUNC,
	CALL,
	CAST,
	AWAIT,
	IDENT,
	MATCH,
	UNARY,
	PUNARY, // postfix unary
	SIZEOF,
	MEMBER,
	ARRLIT,
	BINARY,
	SWITCH,
	TERNARY,
	GENERIC,
	COMPLIT,
	GENCALL,
	ELEMENT,
	NUM_LIT,
	CHR_LIT,
	STR_LIT,
	STR_LIT2,
};

export struct IdentExpr {
	tok:   tokens.Token;
	name:  names.NameInfo;
};

export struct BasicLit {
	tok: tokens.Token;
};

export struct Operator {
	tok: tokens.Token;
};

// put this to their right place after fixing sorting
export enum FuncTypeEnum {
	ORD,
	WORK,
	ASYNC
};

export enum FuncTypeEnum2 {
	BLOCK,
	NATIVE
};

export struct Args {
	names: vec IdentExpr;
	types: vec *Type;
};

export struct FuncType {
	args:       Args;
	type1:      FuncTypeEnum;
	type2:      FuncTypeEnum2;
	returnType: *Type;
	varargs:    *IdentExpr;
};

export struct Block {
	stmts: vec *Stmt;
};
// upto here

export struct UnaryExpr {
	expr: *Expr;
	op:   *Operator;
};

export struct BinaryExpr {
	left:  *Expr;
	right: *Expr;
	op:    *Operator;
};

export struct IsExpr {
	expr: *Expr;
	pattern: *Pattern;
};

export struct TernaryExpr {
	left:  *Expr;
	cond:  *Expr;
	right: *Expr;
};

export struct CallExpr {
	function: *Expr;
	args:     vec *Expr;
};

export struct CastExpr {
	expr: *Expr;
	type: *Type;
};

export struct MemberExpr {
	base: *Expr;
	prop: *IdentExpr;
};

export struct ElementExpr {
	base:  *Expr;
	index: *Expr;
};

export struct CompLit {
	type:   *Type;
	values: vec *Expr;
	fields: vec IdentExpr;
};

export struct ArrayLit {
	elements: vec *Expr;
};

export struct NewExpr {
	type: *Type;
	val:  *Expr;
};

export struct SizeExpr {
	expr: *Expr;
};

export struct AwaitExpr {
	expr: *Expr;
};

export struct FuncExpr {
	type:  *Type;
	body:  Block;
};

export struct GenCall {
	expr: *Expr;
	types: vec *Type;
	index: u32;
};

export struct SwitchExpr {
	initStmt: *Stmt;
	expr:     *Expr;
	conds:    vec *Expr;
	vals:     vec *Expr;
	defalt:   *Expr;
};

export struct MatchExpr {
	initStmt: *Stmt;
	expr:     *Expr;
	conds:    vec *Pattern;
	vals:     vec *Expr;
	defalt:   *Expr;
};

export struct GenericExpr {
	type:   *Type;
	conds:  vec *Type;
	vals:   vec *Expr;
	defalt: *Expr;
	index:  u16;
};

export union ExprUnion {
	unary:   UnaryExpr;
	binary:  BinaryExpr;
	ternary: TernaryExpr;

	callExpr: CallExpr;
	sizeExpr: SizeExpr;
	castExpr: CastExpr;

	compLit:   CompLit;
	arrayLit:  ArrayLit
	newExpr:   NewExpr;
	funcExpr:  FuncExpr;
	awaitExpr: AwaitExpr;

	swtch:   SwitchExpr;
	mtch:    MatchExpr;
	genric:  GenericExpr;
	member:  MemberExpr;
	element: ElementExpr;

	genCall: GenCall;
	isExpr:  IsExpr;
	name:    names.NameInfo;
};

export struct Expr {
	type:  ExprType;
	eType: *Type;
	data:  ExprUnion;
	..tokens.Base;
};

// Types
export enum TypeType {
	BASIC,
	EXPR,
	FUNC,
	ENUM,
	TUPLE,
	CONST,
	ARRAY,
	UNION,
	STRUCT,
	VECTOR,
	STATIC,
	GENCALL,
	CAPTURE,
	PROMISE,
	POINTER,
	IMPARRAY,
	TEMPLATE
};

export struct BasicExprType {
	expr: *Expr;
};

export struct ArrayType {
	size: *BasicLit;
	base: *Type;
};

export struct ImpArrayType {
	base: *Type;
};

export struct UnionType {
	decs: vec *Stmt;
};

export struct EnumType {
	idents: vec IdentExpr;
	values: vec *Expr;
};

export struct TupleType {
	types: vec *Type;
};

export struct StructType {
	name:         *IdentExpr;
	props:        vec *Stmt;
	superStructs: vec *Expr;
};

export struct ConstType {
	base: *Type;
};

export struct PromiseType {
	base: *Type;
};

export struct VectorType {
	base: *Type;
};

export struct PointerType {
	base: *Type;
};

export enum TypeExprEnum {
	NULL,
	TYPE,
	EXPR
};

export union TypeExprUnion {
	type: *Type;
	expr: *Expr;
};

export struct TypeOrExpr {
	type: TypeExprEnum;
	data: TypeExprUnion;
};

export struct TemplateType {
	type:   TypeExprEnum;
	params: vec IdentExpr;
	data:   TypeExprUnion;
	datas:  vec TypeExprUnion;
	args:   vec vec *Type;
};

export union TypeUnion {
	fnc:      FuncType;
	enm:      EnumType;
	tupl:     TupleType;
	cnst:     ConstType;
	expr:     BasicExprType;
	unon:     UnionType;
	array:    ArrayType;
	strct:    StructType;
	promse:   PromiseType;
	vector:   VectorType;
	pointer:  PointerType;
	impArray: ImpArrayType;
	tmplate:  TemplateType;
	genCall:  GenCall;
};

export struct Type {
	type: TypeType;
	data: TypeUnion;
	labl: u8;
	..tokens.Base;
};

// Statements
export enum StmtType {
	NULL,
	__C,
	DEC,
	LOOP,
	EXPR,
	GOTO,
	FUNC,
	SCASE,
	MCASE,
	GCASE,
	BLOCK,
	LABEL,
	MATCH,
	BREAK,
	ASSIGN,
	EXPORT,
	IMPORT,
	SWITCH,
	RETURN,
	DELETE,
	GENERIC,
	DEFAULT,
	IF_ELSE,
	TYPEDEF,
	TEMPLATE,
	CONTINUE
};

export struct __C {
	stuff: vec *Expr;
};

export enum StorageClass {
	AUTO,
	STATIC,
	EXTERN,
	C_EXTERN,
	REGISTER,
};

export struct Declaration {
	sClass: StorageClass;
	idents: vec *Expr;
	types:  vec *Type;
	values: vec *Expr;
};

export struct Import {
	path: *BasicLit;
	name: *IdentExpr;
};

export struct Loop {
	initStmt: *Stmt;
	loopStmt: *Stmt;
	cond:     *Expr;
	block:    Block;
};

export struct Switch {
	expr:     *Expr;
	block:    Block;
	initStmt: *Stmt;
};

export struct Generic {
	type:     *Type;
	block:    Block;
	initStmt: *Stmt;
	start:    u16;
	end:      u16;
};

export struct Match {
	expr:     *Expr;
	block:    Block;
	initStmt: *Stmt;
};

export struct IfElse {
	conds:     vec *Expr;
	initStmts: vec *Stmt;
	blocks:    vec Block;
	elseBlock: Block;
};

export struct Return {
	val: *Expr;
};

export struct SwitchCase {
	val: *Expr;
};

export struct MatchCase {
	val: *Pattern;
};

export struct GenericCase {
	val: *Type;
};

export struct Assignment {
	vars: vec *Expr;
	vals: vec *Expr;
	op:   *Operator;
};

export struct Delete {
	exprs: vec *Expr;
};

export struct Export {
	stmt: *Stmt;
};

export struct Typedef {
	name: *IdentExpr;
	type: *Type;
};

export struct FuncDec {
	name: *IdentExpr;
	type: *Type;
	body: Block;
};

export struct Label {
	name: *IdentExpr;
};

export struct Goto {
	name: *IdentExpr;
};

export struct ExprStmt {
	expr: *Expr;
};

export struct Template {
	name: *IdentExpr;
	type: *Type;
};

export union StmtUnion {
	del:      Delete;
	dec:      Declaration;
	___c:     __C;
	loop:     Loop;
	tdef:     Typedef;
	block:    Block;
	rturn:    Return;
	imprt:    Import;
	swtch:    Switch;
	exprt:    Export;
	ifElse:   IfElse;
	assign:   Assignment;
	funcDec:  FuncDec;
	expr:     ExprStmt;
	labl:     Label;
	gotoh:    Goto;
	scase:    SwitchCase;
	mcase:    MatchCase;
	gcase:    GenericCase;
	mtch:     Match;
	tmplate:  Template;
	genric:   Generic;
};

export struct Stmt {
	type: StmtType;
	data: StmtUnion;
	..tokens.Base;
};

// Pattern
export enum PatternType {
	EXPR,
	UNARY,
	BINARY,
	RANGE,
	ELRANGE,
	COMP
};

export struct ExprPattern {
	expr: *Expr;
};

export struct UnaryPattern {
	expr: *Expr;
	op:   *Operator;
};

export struct BinaryPattern {
	left:  *Pattern;
	right: *Pattern;
	op:    *Operator;
};

export enum RangeType {
	NONE,
	LEFT,
	RIGHT,
	BOTH
};

export struct RangePattern {
	type:  RangeType;
	left:  *Expr;
	right: *Expr;
};

export struct ElementRangePattern {
	len: *Expr;
	val: *Pattern;
	dotdot: bool;
};

export struct CompPattern {
	fields: vec IdentExpr;
	values: vec *Pattern;
};

export union PatternUnion {
	range:   RangePattern;
	binary:  BinaryPattern;
	unary:   UnaryPattern;
	expr:    ExprPattern;
	elRange: ElementRangePattern;
	comp:    CompPattern;
};

export struct Pattern {
	type: PatternType;
	data: PatternUnion;
	..tokens.Base;
};

export struct GlobalStmt {
	stmt:     *Stmt;
	exported: bool;
};

export struct File {
	imprts:  vec *Stmt;
	decs:     vec GlobalStmt;
	funcs:    vec GlobalStmt;
	tdefs:    vec GlobalStmt;
	tmplates: vec GlobalStmt;
	___cs:    vec *Stmt;
};
export func NewFile() File {
	return (File){
		decs:     (vec GlobalStmt){},
		funcs:    (vec GlobalStmt){},
		tdefs:    (vec GlobalStmt){},
		tmplates: (vec GlobalStmt){},
		___cs:    (vec *Stmt){},
		imprts:   (vec *Stmt){}
	};
};
