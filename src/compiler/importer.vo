import "io.vo";
import "heap.vo";
import "mem.vo";
import "num.vo";

import "lexer.vo";
import "ast.vo";
import "parser.vo";
import "names.vo";
import "compiler.vo";

func onData(fp: *$FILE, str: *i8, len: u32){
	$fwrite(str, len, sizeof(i8), fp);
};


importedPaths:         vec *i8;
importedPathsContexts: vec *void;

lastNum: u32;

export func init(){
	importedPaths         = (vec *i8){};
	importedPathsContexts = (vec *void){};
	lastNum               = 1;
};

export func search(path: *i8) *void {
	i := 0;
	l := importedPaths.length;
	for i < l && $strcmp(importedPaths[i], path) != 0 { ++i; }
	return i == l ? null : importedPaths[i];
};

export func getNextNameSpace() names.NameSpace {
	n: names.NameSpace;
	n.len = num.utos(lastNum++, n.buff);
	return n;
};

export func imprt(path: *i8, analyze: *func(*void, ast.File) ast.File, analyzer: *void) i32 {
	fp: *$FILE = $fopen(path, "r");

	io.print("compiling ");
	io.println(path);

	len := cast(size_t)$strlen(path);

	path2 := cast(*i8)heap.malloc((len + 11)*sizeof(i8));
	mem.copy(path2, "./_build/", 9);
	mem.copy(path2+9, path, len);
	mem.copy(path2+len+9, ".c", 2);

	if fp == null {
		path3 := cast(*i8)heap.malloc(sizeof(i8)*(len+6));
		mem.copy(path3, "./lib/", 6);
		mem.copy(path3+6, path, len);

		fp = $fopen(path3, "r");

		if fp == null {
			io.println("fp is null");
			return 1;
		}
	}

	fp2: *$FILE = $fopen(path2, "w");

	if fp2 == null {
		$fclose(fp);
		io.println("fp2 is null");
		return 1;
	}
	stuff := (vec i8){};

	for c: i32 = $fgetc(fp); c != $EOF; c = $fgetc(fp) {
		stuff.push(cast(i8)c);
	}
	stuff.push(0);
	$fclose(fp);

	p := parser.NewParser((lexer.Lexer){buff: stuff});
	c := compiler.NewCompiler(0, cast(*func (*void, *i8, u32))(&onData), cast(*void)fp2);

	start: $timeval;
	end: $timeval;

	$gettimeofday(&start, null);
	c.file((*analyze)(analyzer, p.file()));
	$gettimeofday(&end, null);

	time := ((cast(u64)end.tv_sec - cast(u64)start.tv_sec) * 1000000) + (cast(u64)end.tv_usec - cast(u64)start.tv_usec);

	//$printf("Time taken: %lluus.\n", time);
	$fclose(fp2);

	importedPaths.push(path2);
	importedPathsContexts.push(analyzer);
	return 0;
}
