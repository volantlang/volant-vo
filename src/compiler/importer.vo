import "io.vo";
import "heap.vo";
import "mem.vo";
import "num.vo";

import "util.vo";
import "lexer.vo";
import "ast.vo";
import "parser.vo";
import "names.vo";
import "compiler.vo";

func onData(fp: *$FILE, str: *i8, len: u32){
	$fwrite(str, len, sizeof(i8), fp);
};

time: $timeval;
importedPaths:         vec *i8;
importedPathsContexts: vec *void;

files: vec ast.File;
lastNum: u32;

export func init(){
	$gettimeofday(&time, null);

	files                 = (vec ast.File){};
	importedPaths         = (vec *i8){};
	importedPathsContexts = (vec *void){};
	lastNum               = 0;
};

export func getNextNameSpace() names.NameSpace {
	n: names.NameSpace;
	n.len = num.utos(++lastNum, n.buff);
	return n;
};

export func relLen(path1: *i8, len: size_t) size_t {
	i := len-1;
	for i > 0 && path1[i] != '/' { --i; };
	return i;
};

export func normalize1(path1: *i8, len1: size_t, path2: *i8, len2: size_t, pathf: **i8, lenf: *size_t){
	l := relLen(path1, len1);
	l2 := len2 + l + 2;

	p := cast(*i8)heap.malloc(l2);

	if l != 0 {
		mem.copy(p, path1, l);
		p[l++] = '/';
		l2++;
	}
	mem.copy(p+l, path2, len2);
	p[l2-2] = 0;

	*pathf = p;
	*lenf = l2-2;
};

export func normalize2(path: *i8, len: size_t, pathf: **i8, lenf: *size_t){
	l := len + 6;
	p := cast(*i8)heap.malloc(l);

	mem.copy(p, "./lib/", 6);
	mem.copy(p+6, path, len);

	*pathf = p;
	*lenf = l;
};

export func search(path1: *i8, len1: size_t, path2: *i8, len2: size_t, pathf: **i8, lenf: *size_t) *void {
	newPath: *i8;
	newLen: size_t;

	normalize1(path1, len1, path2, len2, &newPath, &newLen);

	i, l := 0, importedPaths.length;
	for i < l && !util.strcmpx(importedPaths[i], newPath, newLen) { ++i; }

	if i == l {
		delete newPath;
		normalize2(path2, len2, &newPath, &newLen);

		i, l = 0, importedPaths.length;
		for i < l && !util.strcmpx(importedPaths[i], newPath, newLen) { ++i; }
	}

	if i != l {
		*pathf = newPath;
		*lenf = newLen;
		return importedPathsContexts[i];
	}

	delete newPath;
	return null;
};

export func read(parentPath: *i8, parentPathLen: size_t, path: *i8, pathLen: size_t, newPathPtr: **i8, newLenPtr: *size_t) *void {
	io.print("compiling ");
	io.printnln(path, pathLen);

	newPath: *i8;
	newLen: size_t;

	normalize1(parentPath, parentPathLen, path, pathLen, &newPath, &newLen);
	fp: *$FILE = $fopen(newPath, "r");

	if fp == null {
		normalize2(path, pathLen, &newPath, &newLen);
		fp = $fopen(newPath, "r");

		if fp == null {
			io.println("fp is null");
			return null;
		}
	}

	*newPathPtr = newPath;
	*newLenPtr = newLen;

	stuff := (vec i8){};

	for c: i32 = $fgetc(fp); c != $EOF; c = $fgetc(fp) {
		stuff.push(cast(i8)c);
	}
	stuff.push(0);
	$fclose(fp);

	return cast(*void)stuff;
};

export func compile(data: *void, path: *i8, preImports: *func(*void, ast.File) ast.File, postImports: *func(*void, ast.File), analyzer: *void){
	p := parser.NewParser((lexer.Lexer){buff: cast(vec i8)data });
	file := (*preImports)(analyzer, p.file());

	importedPaths.push(path);
	importedPathsContexts.push(analyzer);
	files.push(file);

	(*postImports)(analyzer, file);
};

export func close() i32 {
	c := compiler.NewCompiler(0, cast(*func (*void, *i8, u32))(&onData), null);

	for i := 0; i < importedPaths.length; ++i {
		path := importedPaths[i];
		len := cast(size_t)$strlen(path);

		path2 := cast(*i8)heap.malloc((len + 11)*sizeof(i8));
		mem.copy(path2, "./_build/", 9);
		mem.copy(path2+9, path, len);
		mem.copy(path2+len+9, ".c", 2);

		fp: *$FILE = $fopen(path2, "w");

		if fp == null {
			path3 := cast(*i8)heap.malloc((len + 16)*sizeof(i8));

			mem.copy(path3, "./_build/lib/", 13);
			mem.copy(path3+13, path, len);
			mem.copy(path3+len+13, ".c", 2);

			fp = $fopen(path3, "w");

			if fp == null {
				io.println(path2);
				io.println("fp2 is null");
				return 1;
			}
		}
		c.buff.data = fp;

		c.file(files[i]);

		$fclose(fp);
		c.reset();
	}
	t: $timeval;
	$gettimeofday(&t, null);

	t2 := (cast(u64)(t.tv_sec - time.tv_sec))*1000000 + cast(u64)(t.tv_usec - time.tv_usec);

	$printf("time taken: %lums\n", t2/1000);
	c.free();
	return 0;
};
