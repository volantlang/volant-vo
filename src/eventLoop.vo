import "default.vo";
import "io.vo";
import "heap.vo" as heap;
import "mem.vo" as mem;

export type CallbackNode struct {
	cb:   *fn (*void);
	data: *void;
};

export type CallbackQueue struct {
	data:  *CallbackNode;
	first: size_t;
	last:  size_t;
	size:  size_t;
};

impl CallbackQueue {
	fn init(self: *CallbackQueue, size: size_t){
		self.data = cast(*CallbackNode)heap.malloc(size * sizeof(CallbackNode));
		self.size = size;
		self.last = 0;
		self.first = 0;
	};
	fn enQueue(self: *CallbackQueue, cb: *fn(*void), data: *void){
		register l := self.last;
		l = l == self.size ? cast(size_t)0 : l;

		self.data[l] = [CallbackNode;
			cb: cb,
			data: data
		];
		self.last = ++l;
	};
	fn deQueue(self: *CallbackQueue) CallbackNode {
		register f := self.first;
		register r := self.data[f];

		self.first = f == self.size-cast(size_t)1 ? cast(size_t)0 : ++f;
		return r;
	};
	fn resize(self: *CallbackQueue, size: size_t){
		old := self.data;
		self.data = cast(*CallbackNode)heap.malloc(sizeof(CallbackNode)*size);
			
		if self.last < self.first {
			mem.copy(cast(*void)self.data, cast(*void)(cast(size_t)old + self.first), self.size - self.first);
			mem.copy(cast(*void)(cast(size_t)self.data + self.size - self.first), cast(*void)old, self.last);

			self.last = self.size - self.first + self.last;
		} else if self.last != self.first {
			mem.copy(cast(*void)self.data, cast(*void)(cast(size_t)old + self.first), self.last - self.first);
			self.last = self.last - self.first;
		}
		self.first = 0;
		self.size = size;

		heap.free(old);
	};
	fn getSpace(self: *CallbackQueue) size_t {
		return self.last >= self.first ? self.size - self.last + self.first: self.first - self.last;
	};
	fn isEmpty(self: *CallbackQueue) bool {
		return self.first == self.last;
	};
	fn enQueueAndResize(self: *CallbackQueue, cb: *fn(*void), data: *void){
		if self.getSpace() == cast(size_t)0 {
			self.resize(self.size+cast(size_t)8);
		}
		self.enQueue(cb, data);
	};
};

export type CallbackListNode struct {
	next: *CallbackListNode;
	cb:   *fn (*void) i32;
	data: *void;
};

export type EventLoop struct {
	list:       *CallbackListNode;
	startQueue: CallbackQueue;
	endQueue:   CallbackQueue;	
};

impl EventLoop {
	fn init(self: *EventLoop, startQueueSize: size_t, endQueueSize: size_t){
		self.list = new ([CallbackListNode;
			cb:   null,
			data: null,
			next: null
		]);

		self.startQueue.init(startQueueSize);
		self.endQueue.init(endQueueSize);
	};
	fn add(self: *EventLoop, cb: *fn(*void) i32, data: *void){
		register s := self.list.next;

		self.list.next = new ([CallbackListNode;
			cb:   cb,
			data: data,
			next: s
		]);
	};
	fn hasCallbacks(self: *EventLoop) bool {
		return self.list.next != cast(*CallbackListNode)null || !self.startQueue.isEmpty() || !self.endQueue.isEmpty();
	};
	fn run(self: *EventLoop){
		for !self.startQueue.isEmpty() {
			node := self.startQueue.deQueue();
			(*node.cb)(node.data);
		}
		for last, l := self.list, self.list.next; l != cast(*CallbackListNode)null {
			if (*l.cb)(l.data) != cast(i32)0 {
				last = l;
				l = l.next;
			} else {
				register n := l.next;
				last.next = n;

				delete l;
				l = n;
			}
		}
		for !self.endQueue.isEmpty() {
			node := self.endQueue.deQueue();
			(*node.cb)(node.data);
		}
	};
};

export fn NewEventLoop(startQueueSize: size_t, endQueueSize: size_t) EventLoop {
	evLoop: EventLoop;
	evLoop.init(startQueueSize, endQueueSize);
	return evLoop;
};

